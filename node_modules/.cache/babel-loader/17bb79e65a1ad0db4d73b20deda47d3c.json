{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createVNode as _createVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-799be21b\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"AnswerArea\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Number = _resolveComponent(\"Number\");\n\n  const _component_AnswerBox = _resolveComponent(\"AnswerBox\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.numbers, i => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: i.id\n    }, [_createVNode(_component_Number, {\n      number: i.text,\n      operation: i.operation\n    }, null, 8\n    /* PROPS */\n    , [\"number\", \"operation\"])]);\n  }), 128\n  /* KEYED_FRAGMENT */\n  )), _createVNode(_component_AnswerBox, {\n    onButtonClicked: $options.buttonHandler,\n    onNewSesh: $options.createSession,\n    onShowSettings: _cache[0] || (_cache[0] = $event => {\n      _ctx.showSettings = true;\n    })\n  }, null, 8\n  /* PROPS */\n  , [\"onButtonClicked\", \"onNewSesh\"])]);\n}","map":{"version":3,"mappings":";;;;;EAEKA,KAAK,EAAC;;;;;;;uBAAXC,oBAOM,KAPN,cAOM,oBALFA,oBAEMC,SAFN,EAEM,IAFN,EAEMC,YAFuBC,aAEvB,EAFkBC,CAAY,IAAX;yBAAzBJ,oBAEM,KAFN,EAEM;MAFAK,GAAG,EAAED,CAAC,CAACE;IAEP,CAFN,GACIC,aAAoDC,iBAApD,EAAoD;MAA3CC,MAAM,EAAEL,CAAC,CAACM,IAAiC;MAA1BC,SAAS,EAAEP,CAAC,CAACO;IAAa,CAApD;;IAAA,2BADJ;GAEM,CAFN;;EAAA,CAKE,GADFJ,aAA6GK,oBAA7G,EAA6G;IAAjGC,eAAc,EAAEC,sBAAiF;IAAjEC,SAAQ,EAAED,sBAAuD;IAAvCE,cAAa;MAAEC,oBAAY,IAAZ;IAAY,CAAd;EAA0B,CAA7G;;EAAA,mCACE,CAPN","names":["class","_createElementBlock","_Fragment","_renderList","$data","i","key","id","_createVNode","_component_Number","number","text","operation","_component_AnswerBox","onButtonClicked","$options","onNewSesh","onShowSettings","_ctx"],"sourceRoot":"","sources":["/Users/chr/trap/maf/src/components/AnswerArea.vue"],"sourcesContent":["<template>\n\n<div class=\"AnswerArea\">\n    \n    <div :key=\"i.id\" v-for=\"i in numbers\">\n        <Number :number=\"i.text\" :operation=\"i.operation\" />\n    </div>\n\n    <AnswerBox @button-clicked=\"buttonHandler\" @new-sesh=\"createSession\" @show-settings=\"showSettings = true;\" />\n</div>\n\n\n</template>\n\n<script>\n\nimport Number from './Number'\nimport AnswerBox from './AnswerBox'\n\n\nexport default {\n    name: 'AnswerArea',\n    components: {\n        Number,\n        AnswerBox\n    },\n    data() {\n        return {\n            numbers: [],\n            correctAnswer: 0,\n            maxDigitsForNumber1: 2,\n            maxDigitsForNumber2: 2,\n        }\n    },\n    created() {\n        this.createSession()\n \n    },\n    methods: {\n            createSession() {\n\n   \n            let maxDigitsNumber1 = \"\"\n            let maxDigitsNumber2 = \"\"\n\n            let num1 = Math.floor(Math.random() * (parseInt(maxDigitsNumber1)+1))\n            let num2 = Math.floor(Math.random() * (parseInt(maxDigitsNumber2)+1))\n\n            for(let i=0; i < this.maxDigitsForNumber1; i++) {\n                maxDigitsNumber1 += 9\n            }\n\n            for(let i=0; i < this.maxDigitsForNumber2; i++) {\n                maxDigitsNumber2 += 9\n            }\n\n            let x = Math.floor(Math.random() * 4)\n            let op = ''\n\n            switch(x) {\n                case 0:\n                    op = \"+\"\n                    this.correctAnswer = num1 + num2\n                    break;\n                case 1:\n                    op = \"-\"\n                    this.correctAnswer = num1 - num2\n                    break;\n                case 2:\n                    op = \"x\"\n                    this.correctAnswer = num1 * num2\n                    break;\n                case 3:\n                    op = \"รท\"\n                    this.correctAnswer = num1 / num2\n                    break;\n            }\n\n            this.numbers = [\n                {\n                    id:1,\n                    operation:'',\n                    text:num1\n                },\n                {\n                    id:2,\n                    operation:op,\n                    text:num2\n                }\n            ]\n        },\n        buttonHandler(ans) {\n            if(ans == this.correctAnswer) {\n\n                let audio = new Audio('correct.mp3');\n                audio.loop = false;\n                audio.play();\n\n                this.createSession()\n            }\n        }\n\n\n    }\n\n\n}\n\n</script>\n\n<style scoped>\n\n.AnswerArea {\n    display: flex;\n    flex-direction: column;\n    width: 75vw;\n}\n\n@media only screen and (min-width: 768px) {\n    .AnswerArea {\n        width: 450px;\n    }\n} \n\n\n</style>"]},"metadata":{},"sourceType":"module"}