{"ast":null,"code":"import Number from './Number';\nimport AnswerBox from './AnswerBox';\nexport default {\n  name: 'AnswerArea',\n  components: {\n    Number,\n    AnswerBox\n  },\n\n  data() {\n    return {\n      numbers: [],\n      correctAnswer: 0,\n      maxDigitsForNumber1: 2,\n      maxDigitsForNumber2: 2,\n      streak_val: 0\n    };\n  },\n\n  created() {\n    this.createSession();\n  },\n\n  methods: {\n    createSession() {\n      let maxDigitsNumber1 = \"\";\n      let maxDigitsNumber2 = \"\"; // Determine the maximum number of digits we can generate\n\n      for (let i = 0; i < this.maxDigitsForNumber1; i++) {\n        maxDigitsNumber1 += 9;\n      }\n\n      for (let i = 0; i < this.maxDigitsForNumber2; i++) {\n        maxDigitsNumber2 += 9;\n      } // Generate the 2 numbers randomly\n\n\n      let num1 = Math.floor(Math.random() * (parseInt(maxDigitsNumber1) + 1));\n      let num2 = Math.floor(Math.random() * (parseInt(maxDigitsNumber2) + 1)); // Generate the operation (addition, subtraction, multiplication, division)\n\n      let x = Math.floor(Math.random() * 4);\n      let op = '';\n\n      switch (x) {\n        case 0:\n          // Addition\n          op = \"+\";\n          this.correctAnswer = num1 + num2;\n          break;\n\n        case 1:\n          // Subtraction\n          op = \"-\";\n          this.correctAnswer = num1 - num2;\n          break;\n\n        case 2:\n          // Multiplication\n          op = \"x\";\n          this.correctAnswer = num1 * num2;\n          break;\n\n        case 3:\n          // Division\n          op = \"รท\";\n          this.correctAnswer = num1 / num2;\n          break;\n      } // Add new numbers to dict\n\n\n      this.numbers = [{\n        id: 1,\n        operation: '',\n        text: num1\n      }, {\n        id: 2,\n        operation: op,\n        text: num2\n      }];\n    },\n\n    buttonHandler(ans) {\n      if (ans == this.correctAnswer) {\n        let audio = new Audio('correct.mp3');\n        audio.loop = false;\n        audio.play();\n        this.streak_val = this.streak_val + 1;\n        this.createSession();\n      } else {\n        this.streak_val = 0;\n      }\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAqBA,OAAOA,MAAP,MAAmB,UAAnB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAGA,eAAe;EACXC,IAAI,EAAE,YADK;EAEXC,UAAU,EAAE;IACRH,MADQ;IAERC;EAFQ,CAFD;;EAMXG,IAAI,GAAG;IACH,OAAO;MACHC,OAAO,EAAE,EADN;MAEHC,aAAa,EAAE,CAFZ;MAGHC,mBAAmB,EAAE,CAHlB;MAIHC,mBAAmB,EAAE,CAJlB;MAKHC,UAAU,EAAE;IALT,CAAP;EAOH,CAdU;;EAeXC,OAAO,GAAG;IACN,KAAKC,aAAL;EAEH,CAlBU;;EAmBXC,OAAO,EAAE;IACDD,aAAa,GAAG;MAGhB,IAAIE,gBAAe,GAAI,EAAvB;MACA,IAAIC,gBAAe,GAAI,EAAvB,CAJgB,CAMhB;;MACA,KAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,IAAI,KAAKR,mBAAtB,EAA2CQ,CAAC,EAA5C,EAAgD;QAC5CF,gBAAe,IAAK,CAApB;MACJ;;MAEA,KAAI,IAAIE,CAAC,GAAC,CAAV,EAAaA,IAAI,KAAKP,mBAAtB,EAA2CO,CAAC,EAA5C,EAAgD;QAC5CD,gBAAe,IAAK,CAApB;MACJ,CAbgB,CAgBhB;;;MACA,IAAIE,IAAG,GAAIC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBC,QAAQ,CAACP,gBAAD,CAAR,GAA2B,CAA5C,CAAX,CAAX;MACA,IAAIQ,IAAG,GAAIJ,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBC,QAAQ,CAACN,gBAAD,CAAR,GAA2B,CAA5C,CAAX,CAAX,CAlBgB,CAqBhB;;MACA,IAAIQ,IAAIL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAR;MACA,IAAII,EAAC,GAAI,EAAT;;MAEA,QAAOD,CAAP;QACI,KAAK,CAAL;UAAQ;UACJC,EAAC,GAAI,GAAL;UACA,KAAKjB,aAAL,GAAqBU,IAAG,GAAIK,IAA5B;UACA;;QACJ,KAAK,CAAL;UAAQ;UACJE,EAAC,GAAI,GAAL;UACA,KAAKjB,aAAL,GAAqBU,IAAG,GAAIK,IAA5B;UACA;;QACJ,KAAK,CAAL;UAAQ;UACJE,EAAC,GAAI,GAAL;UACA,KAAKjB,aAAL,GAAqBU,IAAG,GAAIK,IAA5B;UACA;;QACJ,KAAK,CAAL;UAAQ;UACJE,EAAC,GAAI,GAAL;UACA,KAAKjB,aAAL,GAAqBU,IAAG,GAAIK,IAA5B;UACA;MAhBR,CAzBgB,CA6ChB;;;MACA,KAAKhB,OAAL,GAAe,CACX;QACImB,EAAE,EAAC,CADP;QAEIC,SAAS,EAAC,EAFd;QAGIC,IAAI,EAACV;MAHT,CADW,EAMX;QACIQ,EAAE,EAAC,CADP;QAEIC,SAAS,EAACF,EAFd;QAGIG,IAAI,EAACL;MAHT,CANW,CAAf;IAYH,CA3DI;;IA4DLM,aAAa,CAACC,GAAD,EAAM;MACf,IAAGA,GAAE,IAAK,KAAKtB,aAAf,EAA8B;QAE1B,IAAIuB,KAAI,GAAI,IAAIC,KAAJ,CAAU,aAAV,CAAZ;QACAD,KAAK,CAACE,IAAN,GAAa,KAAb;QACAF,KAAK,CAACG,IAAN;QACA,KAAKvB,UAAL,GAAkB,KAAKA,UAAL,GAAkB,CAApC;QACA,KAAKE,aAAL;MAGJ,CATA,MAUK;QACD,KAAKF,UAAL,GAAkB,CAAlB;MACJ;IACJ;;EA1EK;AAnBE,CAAf","names":["Number","AnswerBox","name","components","data","numbers","correctAnswer","maxDigitsForNumber1","maxDigitsForNumber2","streak_val","created","createSession","methods","maxDigitsNumber1","maxDigitsNumber2","i","num1","Math","floor","random","parseInt","num2","x","op","id","operation","text","buttonHandler","ans","audio","Audio","loop","play"],"sourceRoot":"","sources":["/Users/chr/trap/maf/src/components/AnswerArea.vue"],"sourcesContent":["<template>\n\n<div class=\"AnswerArea\">\n    \n    <div class=\"streak\">\n        <span>Current streak</span>\n        <div class=\"streak_block\"> {{ streak_val }}</div>\n    </div>\n    \n    <div :key=\"i.id\" v-for=\"i in numbers\">\n        <Number :number=\"i.text\" :operation=\"i.operation\" />\n    </div>\n\n    <AnswerBox @button-clicked=\"buttonHandler\" @new-sesh=\"createSession\" @show-settings=\"showSettings = true;\" />\n</div>\n\n\n</template>\n\n<script>\n\nimport Number from './Number'\nimport AnswerBox from './AnswerBox'\n\n\nexport default {\n    name: 'AnswerArea',\n    components: {\n        Number,\n        AnswerBox\n    },\n    data() {\n        return {\n            numbers: [],\n            correctAnswer: 0,\n            maxDigitsForNumber1: 2,\n            maxDigitsForNumber2: 2,\n            streak_val: 0\n        }\n    },\n    created() {\n        this.createSession()\n \n    },\n    methods: {\n            createSession() {\n         \n\n            let maxDigitsNumber1 = \"\"\n            let maxDigitsNumber2 = \"\"\n\n            // Determine the maximum number of digits we can generate\n            for(let i=0; i < this.maxDigitsForNumber1; i++) {\n                maxDigitsNumber1 += 9\n            }\n\n            for(let i=0; i < this.maxDigitsForNumber2; i++) {\n                maxDigitsNumber2 += 9\n            }\n\n\n            // Generate the 2 numbers randomly\n            let num1 = Math.floor(Math.random() * (parseInt(maxDigitsNumber1)+1))\n            let num2 = Math.floor(Math.random() * (parseInt(maxDigitsNumber2)+1))\n\n\n            // Generate the operation (addition, subtraction, multiplication, division)\n            let x = Math.floor(Math.random() * 4)\n            let op = ''\n\n            switch(x) {\n                case 0: // Addition\n                    op = \"+\"\n                    this.correctAnswer = num1 + num2\n                    break;\n                case 1: // Subtraction\n                    op = \"-\"\n                    this.correctAnswer = num1 - num2\n                    break;\n                case 2: // Multiplication\n                    op = \"x\"\n                    this.correctAnswer = num1 * num2\n                    break;\n                case 3: // Division\n                    op = \"รท\"\n                    this.correctAnswer = num1 / num2\n                    break; \n            }\n\n\n            // Add new numbers to dict\n            this.numbers = [\n                {\n                    id:1,\n                    operation:'',\n                    text:num1\n                },\n                {\n                    id:2,\n                    operation:op,\n                    text:num2\n                }\n            ]\n        },\n        buttonHandler(ans) {\n            if(ans == this.correctAnswer) {\n\n                let audio = new Audio('correct.mp3');\n                audio.loop = false;\n                audio.play();\n                this.streak_val = this.streak_val + 1\n                this.createSession()\n\n\n            }\n            else {\n                this.streak_val = 0\n            }\n        }\n\n\n    }\n\n\n}\n\n</script>\n\n<style scoped>\n\n.AnswerArea {\n    display: flex;\n    flex-direction: column;\n    width: 75vw;\n}\n\n.streak {\n    display:flex;\n    flex-direction: row;\n    justify-content: center;\n    align-content: center;\n    align-items: center;\n    font-size: 1rem;\n    font-family: 'Poppins', 'Courier New', Courier, monospace;\n    font-weight: 600;\n    color: white;\n    gap: 10px;\n}\n\n.streak_block {\n    display: flex;\n    border: 1px solid #33cc66; \n    width: 35px;\n    height: 35px;\n    align-items: center;\n    justify-content: center;\n    \n\n}\n\n\n@media only screen and (min-width: 768px) {\n    .AnswerArea {\n        width: 450px;\n    }\n} \n\n\n</style>"]},"metadata":{},"sourceType":"module"}